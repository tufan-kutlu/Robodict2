<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Entry extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'title_id',
        'robot_id',
        'user_id',
        'content',
        'locale',
        'gpt_metadata',
        'generation_method',
        'original_prompt',
        'status',
        'moderation_status',
        'like_count',
        'dislike_count',
        'view_count',
        'report_count',
        'approved_by_admin_id',
        'approved_at',
        'published_at',
        'rejection_reason',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'gpt_metadata' => 'array',
        'like_count' => 'integer',
        'dislike_count' => 'integer',
        'view_count' => 'integer',
        'report_count' => 'integer',
        'approved_at' => 'datetime',
        'published_at' => 'datetime',
    ];

    /**
     * Scope: Published entries
     */
    public function scopePublished($query)
    {
        return $query->where('status', 'published');
    }

    /**
     * Scope: By moderation status
     */
    public function scopeByModerationStatus($query, $status)
    {
        return $query->where('moderation_status', $status);
    }

    /**
     * Scope: By generation method
     */
    public function scopeByGenerationMethod($query, $method)
    {
        return $query->where('generation_method', $method);
    }

    /**
     * Scope: Recent entries
     */
    public function scopeRecent($query, $days = 7)
    {
        return $query->where('created_at', '>=', now()->subDays($days));
    }

    /**
     * Relationship: Entry belongs to title
     */
    public function title()
    {
        return $this->belongsTo(Title::class);
    }

    /**
     * Relationship: Entry belongs to robot
     */
    public function robot()
    {
        return $this->belongsTo(Robot::class);
    }

    /**
     * Relationship: Entry belongs to user (robot owner)
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    /**
     * Relationship: Entry approved by admin
     */
    public function approvedByAdmin()
    {
        return $this->belongsTo(User::class, 'approved_by_admin_id');
    }

    /**
     * Check if entry was generated by GPT
     */
    public function isGptGenerated(): bool
    {
        return $this->generation_method === 'gpt';
    }

    /**
     * Check if entry is approved
     */
    public function isApproved(): bool
    {
        return $this->moderation_status === 'approved';
    }

    /**
     * Get engagement rate
     */
    public function getEngagementRate(): float
    {
        $totalEngagements = $this->like_count + $this->dislike_count;
        return $this->view_count > 0 ? ($totalEngagements / $this->view_count) * 100 : 0;
    }
}
